#include "LaumioAP.h"

LaumioAP::LaumioAP(LaumioHttp & h):server(h.server)
{
}

void LaumioAP::begin(char *ssid, char const *pass)
{

    WiFi.mode(WIFI_AP);
    WiFi.softAP(ssid, pass);
    apip = WiFi.softAPIP();

    dns.start(53, "*", apip);

    server.on("/hello", std::bind(&LaumioAP::handleHello, this));
    server.onNotFound(std::bind(&LaumioAP::handleRedirectAP, this));
}

void LaumioAP::acceptDNS()
{
    dns.processNextRequest();
}

const char hello_html[] = {
    0x3c, 0x21, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x20, 0x68,
    0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e,
    0x0a, 0x09, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x09, 0x09,
    0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x4c, 0x61, 0x75, 0x6d,
    0x69, 0x6f, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a,
    0x09, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x09, 0x3c,
    0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x68, 0x31,
    0x3e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x76, 0x6f, 0x74, 0x72,
    0x65, 0x20, 0x4c, 0x61, 0x75, 0x6d, 0x69, 0x6f, 0x3c, 0x2f, 0x68,
    0x31, 0x3e, 0x0a, 0x09, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e,
    0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x00
};

void LaumioAP::handleHello()
{
    if (server.hostHeader() != apip.toString()) {
        handleRedirectAP();
        return;
    }

    server.send(200, "text/html", hello_html);
}

void LaumioAP::handleRedirectAP()
{
    // Pas de cache pour ne pas casser la connexion de l'utilisateur lorsqu'il
    // se d√©connecte du portail captif
    String header = String("HTTP/1.1 301 OK\r\n") +
        String("Location: http://") + apip.toString() +
        String("/hello\r\n") + String("Cache-Control: no-cache\r\n\r\n");

    server.sendContent(header);
}
